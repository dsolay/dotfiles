#!/usr/bin/env bash

NAME=$(basename "$0")
VER="0.4"

usage()
{
    cat <<- EOF

 USAGE:  $NAME [OPTIONS [ADDITIONAL]]

 OPTIONS:

     -h,--help          Display this message

     -v,--version       Display script version

     --polybar          Toggle the configured polybar session, NO additional options

     --picom            Toggle picom or daemon monitoring icon, can use toggle option

     --redshift         Toggle redshift or daemon monitoring icon, can use toggle option

     --screenkey        Toggle screenkey

     --spotifyd         Toggle spotifyd

 ADDITIONAL:

     -t,--toggle        Toggle the program off/on, without this flag a monitor process will be started
     -r,--reload        Reaload the program

EOF
}

# Helper functions

terminate() {
    pkill -x $1
}

notify() {
    default_icon="~/Pictures/icons/info-button.svg"
    notify-send --urgency=low -i ${2:-$default_icon} "Enviroment" "$1"
}

checkexec() {
    command -v $1 > /dev/null || { echo "[x] Error: $1 is not installed."; exit 1; }
}

# Helper functions

toggle_polybar()
{
    checkexec polybar
    if (( opt == 1 )); then
        if [[ $(pidof polybar) ]]; then
            terminate polybar
        else
            ~/.config/polybar/launch.sh &
        fi
    elif (( opt = 2 )); then
        terminate polybar && ~/.config/polybar/launch.sh &
    fi
}

toggle_picom()
{
    checkexec picom
    if (( opt == 1 )); then
        if [[ $(pidof picom) ]]; then
            terminate picom
            notify "Turn off compton" "compton"
        else
            picom --config "$HOME/.config/picom.conf" &
            until pidof picom > /dev/null; do
                sleep 0.1s
            done
            notify "Turn on compton" "compton"
        fi
        exit 0
    fi
    on=""
    off=""
    while true; do
        [[ $(pidof picom) ]] && echo "$on" || echo "$off"
        sleep 2
    done
}

toggle_redshift()
{
    checkexec redshift
    if (( opt == 1 )); then
        if [[ $(pidof redshift) ]]; then
            terminate redshift
            notify "Turn off redshift" "redshift"
        else
            redshift &
            notify "Turn on redshift" "redshift"
        fi
        exit 0
    fi
    on=""
    off=""
    while true; do
        [[ $(pidof redshift) ]] && echo "$on" || echo "$off"
        sleep 2
    done
}

toggle_screenkey()
{
    checkexec screenkey
    if (( opt == 1 )); then
        if pgrep -x screenkey; then
            terminate screenkey
            notify "End Screenkey"
        else
            notify "Start screenkey"
            screenkey -t 1 -s small -p bottom --no-systray --vis-shift --mods-mode normal \
                --font 'JetBrainsMono Nerd Font' --compr-cnt 5 &
        fi
        exit 0
    fi
}

toggle_spotifyd() {
    checkexec spotifyd
    if (( opt == 1 )); then
        if [[ $(pidof spotifyd) ]]; then
            terminate spotifyd
            notify "Spotifyd is killed" "spotify"
        else
            spotifyd
            notify "Spotifyd is started" "spotify"
        fi
        exit 0
    fi
    on="阮"
    off=""
    while true; do
        [[ $(pidof spotifyd) ]] && echo "$on" || echo "$off"
        sleep 2
    done
}

# Catch command line options
case $1 in
    -h|--help) usage ;;
    -v|--version) echo -e "$NAME -- Version $VER" ;;
    --polybar)
        [[ $2 =~ (-t|--toggle) ]] && opt=1
        [[ $2 =~ (-r|--reload) ]] && opt=2
        toggle_polybar
        ;;
    --picom)
        [[ $2 =~ (-t|--toggle) ]] && opt=1
        toggle_picom
        ;;
    --redshift)
        [[ $2 =~ (-t|--toggle) ]] && opt=1
        toggle_redshift
        ;;
    --screenkey)
        [[ $2 =~ (-t|--toggle) ]] && opt=1
        toggle_screenkey
        ;;
    --spotifyd)
        [[ $2 =~ (-t|--toggle) ]] && opt=1
        toggle_spotifyd
        ;;
    *) echo -e "Option does not exist: $1" && usage && exit 1
esac
