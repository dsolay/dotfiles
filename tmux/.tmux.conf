# ==========================
# ===  General settings  ===
# ==========================

set   -g  default-command /bin/bash
set   -sa terminal-overrides ",xterm-256color:RGB"
set   -g  default-terminal "screen-256color"
set   -g  buffer-limit 20
set   -sg escape-time 0
set   -g  remain-on-exit off
set   -g  repeat-time 300
setw  -g  allow-rename off
setw  -g  automatic-rename off

# Change prefix key to C-a, easier to type, same to "screen"
unbind C-b
set -g prefix C-a

# send the prefix to client inside window
bind-key C-a send-prefix

# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
set -g set-titles-string "#I:#W"

# Start index of window/pane with 1, because we're humans, not computers
set   -g base-index 1
setw  -g pane-base-index 1

# Enable mouse support
set -g mouse on

# tmux messages are displayed for 4 seconds
set -g display-time 4000

# focus events enabled for terminals that support them
set -g focus-events on

# super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

# increase scrollback buffer size
set -g history-limit 50000

# ==========================
# ===   Key bindings     ===
# ==========================

# Unbind default key bindings, we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
# unbind }    # swap-pane -D
# unbind {    # swap-pane -U
# unbind [    # paste-buffer
# unbind ]
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left


# Edit configuration and reload
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"

# Reload tmux configuration
bind C-r source-file ~/.tmux.conf \; display "Config reloaded"

# new window and retain cwd
bind c new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"

# Split panes
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"

# Select pane and windows
bind -r C-[ previous-window
bind -r C-] next-window
bind -r [ select-pane -t :.-
bind -r ] select-pane -t :.+
bind -r Tab last-window   # cycle thru MRU tabs
bind -r C-o swap-pane -D

# Zoom pane
bind + resize-pane -Z

# Link window
bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
bind \\ if-shell '[ #{pane_index} -eq 1 ]' \
     'swap-pane -s "!"' \
     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Hide status bar on demand
bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'

# Switch pane
bind 0 run "tmux split-window -l 10 'bash -ci ftpane'"

bind-key u capture-pane \;\
  save-buffer /tmp/tmux-buffer \;\
  split-window -l 10 "urlview /tmp/tmux-buffer"

# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Alerts
set -g monitor-bell on # check for terminal bell
set -g monitor-activity on # check for activity
set -g monitor-silence 0 # do not check for inactivity
set -g bell-action any # monitor all windows
set -g activity-action other # monitor activity in other windows NOTE DO NOT TRACK CURRENT
set -g silence-action none # this should have no effect when: monitor-silence off
set -g visual-activity on # show message, make no sound
set -g visual-bell on # show message, make no sound

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================
set -g @copy_use_osc52_fallback on

# Prefer vi style key table
setw -g mode-keys vi

bind-key Escape copy-mode
bind-key p paste-buffer
bind-key P choose-buffer

# trigger copy mode by

# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X select-line
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi h send-keys -X tree-collapse
bind-key -T copy-mode-vi l send-keys -X tree-expand
bind-key -T copy-mode-vi H send-keys -X tree-collapse-all
bind-key -T copy-mode-vi L send-keys -X tree-expand-all

bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -i -f -selection primary | xclip -i -selection clipboard"

# Middle click to paste from the clipboard
unbind MouseDown2Pane
bind -n MouseDown2Pane run "tmux set-buffer -- \"$(xclip -o -sel primary);\"; tmux paste-buffer -p"

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

# =====================================
# ===           Theme               ===
# =====================================

tempus_fg="#aeadaf"
tempus_bg="#232323"
tempus_fg_alt="#949d9f"
tempus_bg_alt="#312e30"
tempus_bg_dim="#2a2829"

# =====================================
# ===    Appearence and status bar  ===
# ======================================

# Default window colours are inherited from the underlying terminal.
# This also allows for a transparent background.
set -g window-style "bg=default,fg=default"
set -g window-active-style "bg=default,fg=default"

# Pane styles.  Setting the bg to "default" allows for transparency, if
# the underlying terminal emulator is configured accordingly.
set -g pane-border-style "bg=$tempus_bg_dim,fg=$tempus_bg_alt"
set -g pane-active-border-style "bg=$tempus_bg_alt,fg=$tempus_fg_alt"

# Status line styles.  Used when displaying status messages and when
# using the command prompt.
set -g message-style "bg=default,fg=default,bold"

# Clock mode options (I seldom use this, but okay).
set -g clock-mode-style 24 # time format
set -g clock-mode-colour "$tempus_fg_alt"

# Copy mode styles.  This governs such things as the visual selection
# block and the search results in the scroll buffer.  I choose to avoid
# setting to plain "reverse" because it is visually identical to Vim's
# selection, which can be confusing sometimes.
set -g mode-style "bg=$tempus_bg_alt,fg=colour6,bold,underscore"

# Status bar
# ----------

# Interval to update status bar in seconds.  Only affects some elements.
# Test on a case-by-case basis.  My setup is not affected.
set -g status-interval 5

# general status bar settings
set -g status on
set -g status-style "fg=$tempus_fg,bg=$tempus_bg_alt"
set -g status-position bottom
set -g status-justify left

# NOTE the status bar has three components: left, right, centre.  The
# latter is hard-coded to the window list component.  So instead of
# status-centre, we have to modify the `window-status` (see below).
set -g status-left-length "100"
set -g status-right-length "100"

# Window status.  Always placed in the centre if `status-justify
# "centre"`.  Otherwise it floats next to either of the two remaining
# components of the status bar.
#
# NOTE trigger alert to test bell: echo -e '\a'
set -g window-status-separator ""
set -g window-status-format " #I:#W "
set -g window-status-current-format "#[bold] #I:#W #[fg=colour15,bg=$tempus_bg_alt]"
set -g window-status-activity-style ""
set -g window-status-bell-style "fg=colour0,bg=colour14"
set -g window-status-style "fg=$tempus_fg_alt,bg=$tempus_bg_alt"
set -g window-status-current-style "fg=colour0,bg=colour15"
set -g window-status-last-style ""

# define widgets we're going to use in status bar
# note, that this is not the complete list, some of them are loaded from plugins
wg_session="#[bold,fg=colour2,bg=$tempus_bg_alt] #S #[default]"
wg_user_host="#[bold]#(whoami)@#[default]#H"
wg_is_zoomed="#[fg=colour0,bg=colour4]#{?window_zoomed_flag,[Z],}#[default]"

# TODO: highlighted for nested local session as well
wg_is_keys_off="#[fg=colour0,bg=colour13]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"

# Status left and right
set -g status-left "$wg_session"
set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed #{sysstat_cpu} / #{sysstat_mem} | $wg_user_host | #{online_status}"

# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/.tmux/renew_env.sh"

# ==============================================
# ===   Nesting local and remote sessions     ===
# ==============================================

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  refresh-client -S

# ============================
# ===       Plugins        ===
# ============================
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-online-status'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'samoshkin/tmux-plugin-sysstat'

set -g @open-S 'https://duckduckgo.com/?q='

# online and offline icon for tmux-online-status
set -g @online_icon "#[fg=colour2]● #[default]"
set -g @offline_icon "#[fg=colour13]● #[default]"

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_fg "colour0"
set -g @prefix_highlight_bg "colour4"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=colour0,bg=colour4"

# Configure tmux-yank
# set -g @yank_action 'copy-pipe' # or 'copy-pipe-and-cancel' for the default
set -g @yank_selection_mouse 'clipboard' # or 'primary' or 'secondary'

# Run all plugins' scripts
run '~/.tmux/plugins/tpm/tpm'
